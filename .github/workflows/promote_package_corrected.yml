name: Promote Python Package

on:
  push:
    branches:
      - main

env:
  CLOUDSMITH_NAMESPACE: ${{ vars.CLOUDSMITH_NAMESPACE }}  # Replace with the actual namespace
  CLOUDSMITH_STAGING_REPO: ${{ vars.CLOUDSMITH_STAGING_REPO }}
  CLOUDSMITH_PRODUCTION_REPO: ${{ vars.CLOUDSMITH_PRODUCTION_REPO }}
  CLOUDSMITH_SERVICE_SLUG: ${{ vars.CLOUDSMITH_SERVICE_SLUG }}
  PACKAGE_NAME: "python-package"
  CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
  
permissions:
  id-token: write

jobs:
  promote:
    runs-on: ubuntu-latest

    steps:
      - name: Install Cloudsmith CLI
        run: pip install --upgrade cloudsmith-cli
        shell: bash
        
      - name: List cloudsmith packages
        run: cloudsmith list packages ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}
        shell: bash
        
      - name: Ensure correct package
        run: PACKAGE_QUERY="filename:${PACKAGE_NAME}-0.1.0.tar.gz"
        shell: bash
        
      - name: list all available packages
        run: cloudsmith list packages ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }} -F json | jq '.data[].slug'
        shell: bash  
      
      - name: list all repos
        run: cloudsmith list repos ${{ env.CLOUDSMITH_NAMESPACE }}
        shell: bash 
        
      - name: API key must have permission
        run: cloudsmith whoami --api-key ${{ secrets.CLOUDSMITH_API_KEY }}
        shell: bash
      - name: Debug Cloudsmith Repositories
        run: |
          echo "Fetching list of repositories..."
          REPO_DATA=$(cloudsmith list repos ${{ env.CLOUDSMITH_NAMESPACE }} -F json || echo "[]")

          echo "Raw REPO_DATA:"
          echo "$REPO_DATA"

          echo "Extracting repository slugs..."
          echo "$REPO_DATA" | jq '.'
        shell: bash
  
        
      - name: Get package identifier and Tag the synchronized package
        run: |
          # List all packages in the repository
          echo "Fetching all packages in staging repository..."
          PACKAGE_DATA=$(cloudsmith list packages ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }} -F json || echo "{}")

          # Debug: Print the response to check package details
          echo "PACKAGE_DATA: $PACKAGE_DATA"

          # Extract identifier
          IDENTIFIER=$(echo "$PACKAGE_DATA" | jq -r '.data[0].identifier_perm // empty')

          # Check if identifier is empty
          if [ -z "$IDENTIFIER" ] || [ "$IDENTIFIER" == "empty" ]; then
            echo "No matching package found in staging!"
            exit 1
          fi
          
          echo "Found package identifier: $IDENTIFIER"
          echo "Tagging package with 'ready-for-production'"
          cloudsmith tag add ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}/$IDENTIFIER ready-for-production
        shell: bash
        
      - name: Get package identifier and promote
        run: |
          echo "Fetching all packages from staging..."
          PACKAGE_DATA=$(cloudsmith list packages ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }} -F json || echo "{}")

          echo "Raw PACKAGE_DATA:"
          echo "$PACKAGE_DATA" | jq '.data[] | {name: .name, tags: .tags}'

          IDENTIFIERS=$(echo "$PACKAGE_DATA" | jq -r '.data[] | select(.tags.info | index("ready-for-production")) | .identifier_perm')

          if [ -z "$IDENTIFIERS" ]; then
            echo "No packages found with 'ready-for-production' tag"
            exit 1
          fi

          for IDENTIFIER in $IDENTIFIERS; do
            echo "Promoting package: $IDENTIFIER"
            cloudsmith mv --yes \
              ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}/$IDENTIFIER \
              ${{ env.CLOUDSMITH_PRODUCTION_REPO }}
          done
        shell: bash
  
    
